services:
  traefik:
    image: "traefik:v3.1"
    command:
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--log=true"
      - "--log.format=json"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      # Influx metrics
      - "--metrics.influxdb2=true"
      - "--metrics.influxdb2.address=${TRAEFIK_INFLUX_HOST:-http://localhost:8086}"
      - "--metrics.influxdb2.token=${TRAEFIK_INFLUX_SECRET:-secret}"
      - "--metrics.influxdb2.org=NOSSAS"
      - "--metrics.influxdb2.bucket=metrics"
      - "--metrics.influxdb2.additionallabels.host=${TRAEFIK_INFLUX_HOSTNAME:-example.com}"
      - "--global.checknewversion=${TRAEFIK_CHECK_NEW_VERSION:-false}"
      - "--global.sendanonymoususage=${TRAEFIK_SEND_ANONYMOUS_USAGE:-false}"
      - "--ping"
      - "--api.insecure=true"
      # Entrypoints
      - "--entryPoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      # Setup Certificate Resolver
      - "--entryPoints.websecure.http.tls=true"
      # - "--"
      # Docker Provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultRule=Host(`{{ index .Labels \"com.docker.compose.service\"}}.${TRAEFIK_DEFAULT_DOMAIN_RULE:-localhost}`)"
      # Etcd Provider
      - "--providers.etcd=true"
      - "--providers.etcd.endpoints=etcd:2379"
      - "--providers.etcd.rootkey=traefik"
      # Certificates
      - "--certificatesResolvers.myresolver.acme.tlsChallenge=true"
      - "--certificatesResolvers.myresolver.acme.email=${TRAEFIK_DEFAULT_EMAIL_ACME:-igr.exe@gmail.com}"
      - "--certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - etcd
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-xxxxxxx}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-xxxxxx}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    labels:
      - traefik.enable=true
      # Middleware: http(s)://(www.) to  https://
      - traefik.http.middlewares.wwwtohttps.redirectregex.regex=^http?s://www\\.(.+)
      - traefik.http.middlewares.wwwtohttps.redirectregex.replacement=https://$${1}
      - traefik.http.middlewares.wwwtohttps.redirectregex.permanent=true
      # export traefik dashboard
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=myresolver
  
  etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_ENABLE_V2=true
      - ETCDCTL_API=3
    volumes:
      - etcd:/bitnami/etcd
    ports:
      - "2379:2379"
      - "2380:2380"

  redirect:
    image: nossas/bonde-redirect:0.4.7
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    environment:
      - PORT=3007
    volumes:
      - redirect:/go/src/app
    labels:
      - traefik.enable=true
      - traefik.http.routers.redirect.priority=1
      - traefik.http.services.redirect.loadbalancer.server.port=3007
      - traefik.http.routers.redirect.tls=true
      - traefik.http.routers.redirect.tls.certresolver=myresolver
      - traefik.http.routers.redirect.rule=${REDIRECT_TRAEFIK_RULES}

volumes:
  letsencrypt:
    driver: local
  etcd:
    driver: local
  redirect:
    driver: local

# Todos os serviços devem pertencer a mesma rede para serem descobertos pelo Traefik
networks:
  default:
    # Padronizar o nome da rede com o nome do domínio
    name: web