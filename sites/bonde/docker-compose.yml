services:
  public:
    image: ${DOCKER_WEBPAGE_IMAGE:-nossas/bonde-webpage:webpage-v1.0.0}
    command: pnpm --filter webpage-client start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    environment:
      - PORT=3000
      - NODE_ENV=${PUBLIC_NODE_ENV:-development}
      - ACTION_SECRET_KEY=${PUBLIC_ACTION_SECRET_KEY}
      - REACT_APP_API_GRAPHQL_SECRET=${PUBLIC_HASURA_SECRET}
      - REACT_APP_PAGARME_KEY=${PUBLIC_PAGARME_KEY}
      - REACT_APP_DOMAIN_API_ACTIVISTS=${PUBLIC_HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      - REACT_APP_DOMAIN_API_GRAPHQL=${PUBLIC_HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      - REACT_APP_DOMAIN_API_REST=${PUBLIC_REST_API:-http://api-rest.bonde.devel}
      - REACT_APP_DOMAIN_PUBLIC=${DEFAULT_DOMAIN_RULE:-bonde.devel}
      - REACT_APP_ACTIVE_API_CACHE=${ACTIVE_API_CACHE:-false}
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000/api/ping}"
      interval: "60s"
      timeout: "3s"
      start_period: "50s"
      retries: 3
    labels:
      - traefik.enable=true
      - traefik.http.services.public.loadbalancer.server.port=3000
      # Add middleware www https
      - traefik.http.routers.public-catchall.middlewares=wwwtohttps
      # Catch-all Router
      - traefik.http.routers.public-catchall.rule=PathPrefix(`/`)
      - traefik.http.routers.public-catchall.entrypoints=websecure
      - traefik.http.routers.public-catchall.priority=1
      - traefik.http.routers.public-catchall.tls=true
      - traefik.http.routers.public-catchall.tls.certresolver=myresolver
      # Optional: Catch-all HTTP Router
      - traefik.http.routers.public-catchall-http.rule=PathPrefix(`/`)
      - traefik.http.routers.public-catchall-http.entrypoints=web
      - traefik.http.routers.public-catchall-http.priority=1

# Todos os serviços devem pertencer a mesma rede para serem descobertos pelo Traefik
networks:
  default:
    # Padronizar o nome da rede com o nome do domínio
    name: web