services:
  api-accounts:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:hotfix-domain-traefik-rules}
    environment:
      ACCOUNTS_REGISTER_URL: https://accounts.${DEFAULT_DOMAIN_RULE}/register
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      APP_DOMAIN: ${DEFAULT_DOMAIN_RULE}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      LOG_LEVEL: debug
      PORT: '4001'
    command:
      - pnpm
      - --filter
      - accounts-api
      - start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    labels:
      - traefik.enable=true
      - traefik.http.services.api-accounts.loadbalancer.server.port=4001
      - traefik.http.routers.api-accounts.tls=true
      - traefik.http.routers.api-accounts.tls.certresolver=myresolver
      - traefik.http.routers.api-accounts.rule=Host(`api-accounts.${DEFAULT_DOMAIN_RULE}`)

  api-activists:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:v1.3.9}
    environment:
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_BUCKET: ${AWS_BUCKET}
      ACTION_SECRET_KEY: ${ACTION_SECRET_KEY}
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      PORT: '3000'
    command:
      - pnpm
      - --filter
      - activists-api
      - start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always

  api-data:
    image: ${DOCKER_IMAGE_PYTHON:-nossas/bonde-an-web-fastapi:v1.4.0}
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command:
      - uvicorn
      - main:app
      - --host
      - "0.0.0.0"
      - --port
      - "8000"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always

  api-domains:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:v1.3.9}
    environment:
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_ROUTE53_REGION: ${AWS_ROUTE53_REGION}
      AWS_ROUTE_IP: ${AWS_ROUTE_IP}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      HASURA_SECRET: ${HASURA_SECRET}
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      ETCD_URL: ${ETCD_URL:-http://etcd:2379}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      PORT: '3000'
    command:
      - pnpm
      - --filter
      - domains-api
      - start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always

  api-notifications:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:v1.3.9}
    environment:
      ELASTICSEARCH_CLOUD_ID: ${ELASTICSEARCH_CLOUD_ID}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      ELASTIC_APM_SECRET_TOKEN: ${ELASTIC_APM_SECRET_TOKEN}
      ELASTIC_APM_SERVER_URL: ${ELASTIC_APM_SERVER_URL}
      ELASTIC_APM_SERVICE_NAME: ${ELASTIC_APM_SERVICE_NAME:-notifications}
      HOST: 0.0.0.0
      PORT: '3000'
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_WEBHOOK_KEY: ${SENDGRID_WEBHOOK_KEY}
    command:
      - pnpm
      - --filter
      - notifications
      - start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always

  api-payments:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:v1.3.9}
    environment:
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      PAGARME_API_KEY: ${PAGARME_KEY}
      PORT: '3000'
    command:
      - pnpm
      - --filter
      - payments-api
      - start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always

  api-redes:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:v1.3.9}
    environment:
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      PORT: '3000'
      ZENDESK_API_TOKEN: ${ZENDESK_API_TOKEN}
      ZENDESK_API_URL: ${ZENDESK_API_URL}
      ZENDESK_API_USER: ${ZENDESK_API_USER}
      ZENDESK_ORGANIZATIONS: ${ZENDESK_ORGANIZATIONS}
    command:
      - pnpm
      - --filter
      - redes-api
      - start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always

# Todos os serviços devem pertencer a mesma rede para serem descobertos pelo Traefik
networks:
  default:
    # Padronizar o nome da rede com o nome do domínio
    name: web