services:
  traefik:
    image: "traefik:v3.1"
    command:
      # - "--accesslog.filepath=/logs/access.log"
      - "--accesslog=true"
      - "--accesslog.format=json"
      # - "--log.filepath=/logs/traefik.log"
      - "--log=true"
      - "--log.format=json"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-ERROR}"
      - "--metrics.influxdb2=true"
      - "--metrics.influxdb2.address=${TRAEFIK_INFLUX_HOST:-http://localhost:8086}"
      - "--metrics.influxdb2.token=${TRAEFIK_INFLUX_SECRET:-secret}"
      - "--metrics.influxdb2.org=NOSSAS"
      - "--metrics.influxdb2.bucket=metrics"
      - "--metrics.influxdb2.additionallabels.host=${TRAEFIK_INFLUX_HOSTNAME:-example.com}"
      - "--global.checknewversion=${TRAEFIK_CHECK_NEW_VERSION:-false}"
      - "--global.sendanonymoususage=${TRAEFIK_SEND_ANONYMOUS_USAGE:-false}"
      - "--ping"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultRule=Host(`{{ index .Labels \"com.docker.compose.service\"}}.${TRAEFIK_DEFAULT_DOMAIN_RULE:-bonde.devel}`)"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      # - "--entrypoints.websecure.http.middlewares=securityHeader@etcd"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_DEFAULT_EMAIL_ACME:-tech@bonde.devel}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=route53"
    restart: always
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "80:80"
      - "443:443"
      # - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-xxxxxxx}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-xxxxxx}
      AWS_REGION: ${AWS_REGION:-us-east-1}
    labels:
      - traefik.enable=true
      # global redirection: https (www.) to https
      - traefik.http.routers.wwwsecure-catchall.rule=HostRegexp(`{host:(www\\.).+}`)
      - traefik.http.routers.wwwsecure-catchall.entrypoints=websecure
      - traefik.http.routers.wwwsecure-catchall.tls=true
      - traefik.http.routers.wwwsecure-catchall.middlewares=wwwtohttps
      # middleware: http(s)://(www.) to  https://
      - traefik.http.middlewares.wwwtohttps.redirectregex.regex=^https?://(?:www\\.)?(.+)
      - traefik.http.middlewares.wwwtohttps.redirectregex.replacement=https://$${1}
      - traefik.http.middlewares.wwwtohttps.redirectregex.permanent=true
      # export traefik dashboard
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=myresolver

  api-graphql:
    image: hasura/graphql-engine:v2.44.0
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=${HASURA_GRAPHQL_DATABASE_URL:-postgres://user:pass@postgres:5432/bonde}
      - HASURA_GRAPHQL_VOTEPELOCLIMA_DATABASE_URL=${HASURA_GRAPHQL_VOTEPELOCLIMA_DATABASE_URL:-postgres://user:pass@postgres:5432/votepeloclima}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=${HASURA_GRAPHQL_ENABLE_CONSOLE:-'false'}
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-segredo123}
      - HASURA_GRAPHQL_JWT_SECRET=${HASURA_GRAPHQL_JWT_SECRET}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anonymous
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup,query-log,http-log,webhook-log,websocket-log
      - HASURA_GRAPHQL_LOG_LEVEL=${HASURA_GRAPHQL_LOG_LEVEL:-debug}
      - HASURA_GRAPHQL_CORS_DOMAIN=${HASURA_GRAPHQL_CORS_DOMAIN:-*}
      - HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS=false
      # Remote schemas
      - API_ACCOUNTS_URL=${HASURA_REMOTE_SCHEMA_API_ACCOUNTS_URL:-http://api-accounts.bonde.devel}
      - API_ACTIVISTS_URL=${HASURA_REMOTE_SCHEMA_API_ACTIVISTS_URL:-http://activists.bonde.devel}
      - API_DOMAINS_URL=${HASURA_REMOTE_SCHEMA_API_DOMAINS_URL:-http://api-domains.bonde.devel}
      - API_NOTIFICATIONS_URL=${HASURA_REMOTE_SCHEMA_API_NOTIFICATIONS_URL:-http://notifications.bonde.devel}
      - API_PAYMENTS_URL=${HASURA_REMOTE_SCHEMA_API_PAYMENTS_URL:-http://api-payments.bonde.devel}
      - API_REDES_URL=${HASURA_REMOTE_SCHEMA_API_REDES_URL:-http://api-redes.bonde.devel}
      - N8N_WEBHOOK_URL=${HASURA_N8N_WEBHOOK_URL:-http://n8n.bonde.devel/webhook}
      - PORT=8080
    restart: always
    pull_policy: always
    logging:
      driver: "json-file"
      options:
        max-size: "5120m"
    labels:
      - traefik.http.services.api-graphql.loadbalancer.server.port=8080
      - traefik.enable=true
      - traefik.http.routers.api-graphql.tls=true
      - traefik.http.routers.api-graphql.tls.certresolver=myresolver
      - traefik.http.routers.api-graphql.rule=Host(`api-graphql.${DEFAULT_DOMAIN_RULE}`)

volumes:
  letsencrypt:
    driver: local

# Todos os serviços devem pertencer a mesma rede para serem descobertos pelo Traefik
networks:
  default:
    # Padronizar o nome da rede com o nome do domínio
    name: web